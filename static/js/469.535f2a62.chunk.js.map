{"version":3,"file":"static/js/469.535f2a62.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetail.jsx","services/apiMovies.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Styled.scss';\n\nconst MovieCard = ({ movie }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n\n  return (\n    <>\n      <div className=\"card\">\n        <img\n          className=\"card__poster\"\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg'\n          }\n          alt=\"\"\n        ></img>\n        <div className=\"card__content\">\n          <h2 className=\"card__title\">{title}</h2>\n          <ul className=\"card__list\">\n            <li className=\"card__item\">\n              <span>Release date:</span>\n              <span className=\"card__text\">{release_date}</span>\n            </li>\n            <li className=\"card__item\">\n              <span>User score:</span>\n              <span className=\"card__text\">{vote_average}%</span>\n            </li>\n            <li className=\"card__item\">\n              <h3 className=\"card__subtitle\">Overview:</h3>\n            </li>\n            <li className=\"card__item\">\n              <p className=\"card__text\">{overview}</p>\n            </li>\n            <li className=\"card__item\">\n              <h3 className=\"card__subtitle\">Genres:</h3>\n            </li>\n            <li className=\"card__item\">\n              {genres.map(({ name }) => (\n                <span key={name} className=\"card__tag\">\n                  {name}\n                </span>\n              ))}\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"meta\">\n        <ul className=\"meta__nav\">\n          <li className=\"meta__item\">\n            <Link to=\"cast\">cast</Link>\n          </li>\n          <li className=\"meta__item\">\n            <Link to=\"reviews\">reviews</Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n\nexport default MovieCard;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { Link, useParams, useLocation, Outlet } from 'react-router-dom';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { getMovieById } from 'services/apiMovies';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { BsArrowReturnLeft } from 'react-icons/bs';\nimport styled from 'styled-components';\nimport { Section } from 'components/App.styled';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 150px;\n  gap: 8px;\n  color: #042541;\n  border: 1px solid #042541;\n  border-radius: 4px;\n  padding: 8px 0px;\n  transition: all 250ms linear;\n  margin-top: 24px;\n\n  &:hover {\n    color: white;\n    background-color: #042541;\n  }\n`;\n\nconst MovieDetail = () => {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState(Status.IDLE);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieById = async movieId => {\n      try {\n        setStatus(Status.PENDING);\n        const response = await getMovieById(movieId);\n        setMovie(response);\n        setStatus(Status.RESOLVED);\n      } catch {\n        setStatus(Status.REJECTED);\n      }\n    };\n\n    fetchMovieById(movieId);\n  }, [movieId]);\n\n  return (\n    <Section>\n      <StyledLink to={backLinkHref.current}>\n        <BsArrowReturnLeft width={16} /> Come back\n      </StyledLink>\n\n      {status === 'pending'\n        ? Loading.standard({\n            backgroundColor: 'transparent',\n          })\n        : Loading.remove()}\n\n      {status === 'resolved' && <MovieCard movie={movie} />}\n\n      <Suspense fallback={<div>Loading ...</div>}>\n        <Outlet />\n      </Suspense>\n    </Section>\n  );\n};\n\nexport default MovieDetail;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '31f0c221a6a4c16d94ce50023b58333b';\n\nexport async function getTrendingMovies() {\n  const res = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return res.data.results;\n}\n\nexport async function getMoviesByQuery(query) {\n  const res = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return res.data.results;\n}\n\nexport async function getMovieById(movieId) {\n  const res = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const res = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const res = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data.results;\n}\n"],"names":["movie","poster_path","title","release_date","vote_average","overview","genres","className","src","alt","map","name","to","Status","StyledLink","styled","Link","useState","setMovie","status","setStatus","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieById","getMovieById","response","current","width","Loading","backgroundColor","Suspense","fallback","axios","API_KEY","getTrendingMovies","res","data","results","getMoviesByQuery","query","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}